<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

        <!-- 扫描接口包 -->
    <context:component-scan base-package="cn.mys.mapper">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller" />
    </context:component-scan>
    <!-- 数据库连接池 -->
    <context:property-placeholder location="classpath:db.properties"/>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${driver}" />
        <property name="jdbcUrl" value="${url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!--c3p0连接池私有属性-->
        <property name="maxPoolSize" value="30" />
        <property name="minPoolSize" value="10" />
        <!--关闭连接后不自动commit-->
        <property name="autoCommitOnClose" value="false" />
        <!--获取连接超时时间-->
        <property name="checkoutTimeout" value="100000" />
        <!--当获取连接失败重试次数-->
        <property name="acquireRetryAttempts" value="2" />
    </bean>
    <!--工厂-->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据源-->
        <property name="dataSource" ref="dataSource" />
        <!--引入mapper文件-->
        <!--这就要求所有的mapper文件在cn/mys/mapper/之下-->
        <property name="mapperLocations" value="classpath:cn/mys/mapper/**/*.xml"/>
        <property name="configuration">
            <bean class="org.apache.ibatis.session.Configuration">
                <property name="mapUnderscoreToCamelCase" value="true"/>
            </bean>
        </property>
        <!--插件配置-->
        <property name="plugins">
            <array>
                <!--分页插件的配置 拦截器的分页功能-->
                <bean class="com.github.pagehelper.PageInterceptor">
                    <!--这里的几个配置主要演示如何使用,如果不理解,一定要去掉下面的配置-->
                    <property name="properties">
                        <value>
                            helperDialect=mysql
                            reasonable=true
                            supportMethodsArguments=true
                            params=count=countSql
                            autoRuntimeDialect=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
    <!--持久层接口 扫包-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定Dao接口的包-->
        <property name="basePackage" value="cn.mys.mapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"/>
    </bean>

    <!--事务管理 使用数据源事务管理类进行管理-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--确定事务管理的策略 指向上面的transactionManager-->
    <tx:advice transaction-manager="transactionManager" id="transactionAdvice">
        <tx:attributes>
            <tx:method name="select*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="delete*" propagation="REQUIRED"
                        rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="insert*" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED"
                       rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>

    <!--使用aop对事务管理的范围进行织入 明确几个点 1 对哪些地方进行事务的管理 execution书写,
        明确边界 2 使用什么策略去管理 策略我们使用了tx:advice全部书写于其中,在我们的aop的
        advisor当中只需要去引用这个事务管理者的建议即可.-->
    <aop:config>
        <aop:pointcut id="txCut" expression="execution(* cn.mys.service..*.*(..))"/>
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="txCut"/>
    </aop:config>

    <!--采用注解进行事务处理,请在Service的实现类上面加上@Transanctional注解-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>
